/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.voislavj.messageserver;

import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.HashMap;

import org.java_websocket.WebSocket;
import org.java_websocket.handshake.ClientHandshake;
import org.java_websocket.server.WebSocketServer;

public class MessageServer extends WebSocketServer {
  public static String DISPATCHER_ID = "__dispatcher_id";

  Charset cset = StandardCharsets.UTF_8;
  RequestResolver requestResolver;

  private HashMap<String, WebSocket> clients = new HashMap<>();

  public MessageServer(String host, int port, RequestResolver requestResolver) {
    super(new InetSocketAddress(host, port));

    this.requestResolver = requestResolver;
    this.requestResolver.setMessageServer(this);
  }

  @Override
  public void onStart() {
    Log.info("Server started.");
  }

  @Override
  public void onOpen(WebSocket conn, ClientHandshake handshake) {

  }

  @Override
  public void onClose(WebSocket conn, int code, String reason, boolean remote) {

  }

  @Override
  public void onError(WebSocket conn, Exception error) {
    Log.error(error);
  }

  @Override
  public void onMessage(WebSocket conn, String message) {
    Message msg = Message.fromJson(message);
    if (msg != null) {
      handleMessage(msg, conn);
    }
  }

  public void addClient(String id, WebSocket client) {
    clients.put(id, client);
  }

  public WebSocket getClient(String id) {
    return clients.get(id);
  }

  public WebSocket getDispatcherClient() {
    return clients.get(DISPATCHER_ID);
  }

  public void removeClient(String id) {
    clients.remove(id);
  }

  private void handleMessage(Message msg, WebSocket client) {
    MessageHandler op = requestResolver.resolve(msg.subject, client);
    if (op != null) {
      op.handle(msg);
    }
  }
}
